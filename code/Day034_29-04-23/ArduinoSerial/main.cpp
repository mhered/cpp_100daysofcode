
#include <iostream>
#include <libserial/SerialPort.h>
#include <libserial/SerialStream.h>
#include <chrono>
#include <thread>

int main()
{
    // create and open serial port
    LibSerial::SerialStream my_serial("/dev/ttyUSB0");
    // set baud rate
    my_serial.SetBaudRate(LibSerial::BaudRate::BAUD_9600);
    // set char size
    my_serial.SetCharacterSize(LibSerial::CharacterSize::CHAR_SIZE_8);

    // wait for Arduino to reboot and send <Ready> message
    while (true)
    {
        // Read characters from the serial stream
        char next_char;

        // std::noskipws otherwise skips whitespace?
        my_serial >> std::noskipws >> next_char;

        std::cout << next_char << std::flush;
        if (next_char == '>')
        {
            std::cout << std::endl;
            break;
        }
    }

    // send a string to Arduino
    std::cout << "Sending string to Arduino..." << std::endl;

    std::string my_string;

    // this string will be generated by ./morse -s "my message"
    my_string = "1010100011101110111000101010000000";

    // to replicate the ending of strings input manually with miniterm
    my_string += "\r\n";

    my_serial << std::noskipws << my_string << std::endl;

    // wait for Arduino to transmit Morse code and send <Success> message
    while (true)
    {
        // Read characters from the serial stream
        char next_char;

        // std::noskipws otherwise skips whitespace
        my_serial >> std::noskipws >> next_char;

        std::cout << next_char << std::flush;

        if (next_char == '>')
        {
            std::cout << std::endl;
            break;
        }
    }

    my_serial.Close(); // close the stream
    return 0;
}
